?inv
?solve
source("coursera/cacheMatrix.R")
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
source("coursera/cacheMatrix.R")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
test(mat1)
test(mat1)
r <- rnorm(100, 5, 10)
head(r)
?rnorm
r
summary(r)
d <- dnorm(1:100, 2)
summary(d)
d
p <- pnorm(1:100, 2)
p
clear()
?rpois
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(y)
plot(x, y)
getwd()
ls()
train <- read.csv("train.csv")
str(train)
test <- read.csv("test.csv")
head("train", n = 10)
head(train, n = 10)
head(train, n = 10)
count.fields(train)
count.fields("train.csv")
setwd("sd/Getting and Cleaning Data/Week 1/")
data <- read.csv("data.csv")
str(data)
a <- table(data[,"VAL"])
a
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "data2.csv", method = "curl")
data2 <- read.csv("data2.csv")
?read.xlsx
??read.xlsx
library("readxl")
install.packages("readxl")
library("readxl")
?read.xlsx
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "data2.xlsx", method = "curl")
data2 <- read.csv("data2.xlsx")
data2 <- read_excel("data2.xlsx")
data2[1,]
data2[18:23,7:15]
data2 <- read_excel("data2.xlsx", col_names = TRUE)
data2[18:23,7:15]
data2 <- as.character(read_excel("data2.xlsx", col_names = TRUE))
data2[18:23,7:15]
data2[19:23,7:15]
data2 <- read_excel("data2.xlsx", col_names = TRUE)
data2[19:23,7:15]
a <- data2[19:23,7:15]
a
dat
dat <- data2[19:23,7:15]
sum(dat[,7]*dat[,12],na.rm=T)
sum(dat[7]*dat[12],na.rm=T)
sum(dat[7,]*dat[12,],na.rm=T)
dat[,7]
dat[7,]
dat[1,]
dat[1,]
dat[,1]
sum(dat[,1]*dat[,6],na.rm=T)
sum(as.numeric(dat[,1])*as.numeric(dat[,6]),na.rm=T)
install.packages("XML")
library("XML")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileURL, destfile = "data.xml", method = "curl")
doc <- xmlTreeParse(fileURL, useInternalNodes = TRUE)
doc <- xmlParse(fileURL, useInternalNodes = TRUE)
doc <- xmlParse(fileURL)
doc <- xmlParse("data.xml")
doc
doc <- xmlTreeParse("data.xml", useInternalNodes = )
doc <- xmlTreeParse("data.xml", useInternalNodes = TRUE)
doc
head(doc)
data <- xmlParse("data.xml")
xmlToDataFrame(nodes=getNodeSet(data1,"//data"))[c("location","time-layout")]
step1 <- xmlToDataFrame(nodes=getNodeSet(data1,"//location/point"))[c("latitude","longitude")]
step2 <- xmlToDataFrame(nodes=getNodeSet(data1,"//time-layout/start-valid-time"))
step3 <- xmlToDataFrame(nodes=getNodeSet(data1,"//parameters/temperature"))[c("type="hourly"")]
doc
rootnode<- xmlRoot(doc)
rootnode
rootsize <- xmlSize(rootnode)
rootsize
install.packages("XML")
install.packages("plyr")
install.packages("XML")
require("XML")
require("plyr")
require("ggplot2")
require("gridExtra")
install.packages("gridExtra")
require("gridExtra")
xmlfile <- xmlParse("data.xml")
class(xmlfile)
xmltop <- xmlRoot(xmlfile)
xmltop
library("XML")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "data.xml")
doc <- xmlParse("data.xml")
doc
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "data3.csv", "curl")
?fread
install.packages("data.table")
library("data.table")
?fread
fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
str(DT)
pwgtp15
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
