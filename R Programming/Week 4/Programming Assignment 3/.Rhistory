?inv
?solve
source("coursera/cacheMatrix.R")
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
source("coursera/cacheMatrix.R")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
test(mat1)
test(mat1)
r <- rnorm(100, 5, 10)
head(r)
?rnorm
r
summary(r)
d <- dnorm(1:100, 2)
summary(d)
d
p <- pnorm(1:100, 2)
p
clear()
?rpois
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(y)
plot(x, y)
cube (x, n) {}
cube (x, n) {
cube <- function(x, n) {}
cube <- function(x, n) {
x^3
}â™¥
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
getwd()
setwd("sd/R Programming/Week 2/Programming Assignment 1/")
ls()
source("complete.R", "pollutantmean.R", "corr.R")
source("complete.R")
source("corr.R")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
View(complete)
View(complete)
View(corr)
View(pollutantmean)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
cc
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
cc[,2]
cc <- complete("specdata", 54)
cc[,2]
cc
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(0, round(cr, 4)))
library(datasets)
data(iris)
?iris
str(iris)
m <- mean(iris$Sepal.Length)
m
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
library(datasets)
data(mtcars)
str(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
str(mtcars)
?mtcars
175 - 93
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## this function (cacheSolve) calculates the inverse of the matrix 'm' returned by the function 'makeCacheMatrix'
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
exit
undebug(ls)
*
undebug(ls)
setwd("../../Week 4/Programming Assignment 3/")
source("best.R")
source("rankall.R")
source("rankhospital.R")
best("SC", "heart attack")
set.seed(1)
rpois(5, 2)
?dpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("TX", "pneumonia", 9)
rankhospital("TX", "pneumonia", 11)
rankhospital("NY", "heart attack", 7)
rankhospital("NY", "heart attack", 6)
rankhospital("NY", "heart attack", 8)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r
r <- rankall("pneumonia", "worst")
r
r <- rankall("heart failure", 10)
r
install.packages("KernSmooth")
load("KernSmooth")
